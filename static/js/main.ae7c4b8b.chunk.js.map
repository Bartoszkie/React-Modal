{"version":3,"sources":["components/button/button.component.jsx","components/modal-header/modal-header.component.jsx","components/modal-content/modal-content.component.jsx","components/modal-footer/modal-footer.component.jsx","components/modal/modal.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Button","buttonMethod","children","className","onClick","ModalHeader","title","toggle","ModalContent","props","ModalFooter","callToActionLabel","alert","Modal","state","isOpen","setState","stopPropagation","e","this","React","Children","map","child","cloneElement","Component","Header","Content","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mWAOeA,G,wBAJA,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,aAAcC,EAAe,EAAfA,SAC9B,OAAO,4BAAQC,UAAU,mBAAmBC,QAASH,GAAeC,KCUvDG,EATK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OAC5B,OACE,yBAAKJ,UAAU,gBACb,wBAAIA,UAAU,uBAAuBG,GACrC,kBAAC,EAAD,CAAQL,aAAcM,GAAtB,kBCFSC,G,MAJM,SAAC,EAAcC,GAAW,IAAvBP,EAAsB,EAAtBA,SACtB,OAAO,yBAAKC,UAAU,iBAAiBD,KCe1BQ,G,MAdK,SAAC,GAAmC,IAAjCH,EAAgC,EAAhCA,OAAQI,EAAwB,EAAxBA,kBAM7B,OACE,4BAAQR,UAAU,gBAChB,kBAAC,EAAD,CAAQF,aAAcM,GAAtB,gBACA,kBAAC,EAAD,CAAQN,aARY,WACtBW,MAAM,MACNL,MAM0CI,MCPzBE,E,4MAKnBC,MAAQ,CACNC,QAAQ,G,EAGVR,OAAS,WACP,EAAKS,SAAS,CACZD,QAAS,EAAKD,MAAMC,U,EAIxBE,gBAAkB,SAACC,GACjBA,EAAED,mB,uDAGM,IAAD,OACCF,EAAWI,KAAKL,MAAhBC,OACFb,EAAWkB,IAAMC,SAASC,IAAIH,KAAKV,MAAMP,UAAU,SAACqB,GAAD,OACvDH,IAAMI,aAAaD,EAAO,CAAER,SAAQR,OAAQ,EAAKA,YAGnD,OACE,yBACEJ,UAAS,UACPgB,KAAKL,MAAMC,OAAS,uBAAyB,0BAE/CX,QAASe,KAAKZ,QAEd,yBAAKJ,UAAU,yBAAyBC,QAASe,KAAKF,iBACnDf,Q,GAjCwBkB,IAAMK,WAApBZ,EACZa,OAASrB,EADGQ,EAEZc,QAAUnB,EAFEK,EAGZe,OAASlB,E,ICcHmB,E,uKAhBX,OACE,yBAAK1B,UAAU,WACb,kBAAC,EAAD,KACE,kBAAC,EAAMuB,OAAP,CAAcpB,MAAO,sBACrB,kBAAC,EAAMqB,QAAP,KACE,iEAEF,kBAAC,EAAMC,OAAP,CAAcjB,kBAAmB,0BAGnC,iE,GAZUS,IAAMK,WCMJK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ae7c4b8b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./button.styles.scss\";\r\n\r\nconst Button = ({ buttonMethod, children }) => {\r\n  return <button className=\"button-component\" onClick={buttonMethod}>{children}</button>;\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport \"./modal-header.styles.scss\";\r\n\r\nimport Button from \"../button/button.component\";\r\n\r\nconst ModalHeader = ({ title, toggle }) => {\r\n  return (\r\n    <div className=\"modal-header\">\r\n      <h2 className=\"modal-header__title\">{title}</h2>\r\n      <Button buttonMethod={toggle}>Modal Change</Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ModalHeader;\r\n","import React from \"react\";\r\nimport \"./modal-content.styles.scss\";\r\n\r\nconst ModalContent = ({ children }, props) => {\r\n  return <div className=\"modal-content\">{children}</div>;\r\n};\r\n\r\nexport default ModalContent;\r\n","import React from \"react\";\r\nimport \"./modal-footer.scss\";\r\n\r\nimport Button from \"../button/button.component\";\r\n\r\nconst ModalFooter = ({ toggle, callToActionLabel }) => {\r\n  const toggleWithAlert = () => {\r\n    alert(\"OK\");\r\n    toggle();\r\n  };\r\n\r\n  return (\r\n    <footer className=\"modal-footer\">\r\n      <Button buttonMethod={toggle}>Modal Change</Button>\r\n      <Button buttonMethod={toggleWithAlert}>{callToActionLabel}</Button>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default ModalFooter;\r\n","import React from \"react\";\r\nimport \"./modal.styles.scss\";\r\n\r\nimport ModalHeader from \"../modal-header/modal-header.component\";\r\nimport ModalContent from \"../modal-content/modal-content.component\";\r\nimport ModalFooter from \"../modal-footer/modal-footer.component\";\r\n\r\nexport default class Modal extends React.Component {\r\n  static Header = ModalHeader;\r\n  static Content = ModalContent;\r\n  static Footer = ModalFooter;\r\n\r\n  state = {\r\n    isOpen: true,\r\n  };\r\n\r\n  toggle = () => {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen,\r\n    });\r\n  };\r\n\r\n  stopPropagation = (e) => {\r\n    e.stopPropagation();\r\n  };\r\n\r\n  render() {\r\n    const { isOpen } = this.state;\r\n    const children = React.Children.map(this.props.children, (child) =>\r\n      React.cloneElement(child, { isOpen, toggle: this.toggle })\r\n    );\r\n\r\n    return (\r\n      <div\r\n        className={`${\r\n          this.state.isOpen ? \"modal-container-open\" : \"modal-container-closed\"\r\n        }`}\r\n        onClick={this.toggle}\r\n      >\r\n        <div className=\"modal-container__items\" onClick={this.stopPropagation}>\r\n          {children}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\n\nimport \"./App.styles.scss\";\n\nimport Modal from \"./components/modal/modal.component\";\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <Modal>\n          <Modal.Header title={\"Tytuł modala\"}></Modal.Header>\n          <Modal.Content>\n            <h1>to powinno działać tak</h1>\n          </Modal.Content>\n          <Modal.Footer callToActionLabel={\"Udało Się!\"} />\n        </Modal>\n\n        <h1>Test task for JS Gladiators!</h1>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}